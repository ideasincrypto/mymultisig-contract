/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface MyMultiSigFactoryWithChugSplashInterface
  extends utils.Interface {
  functions: {
    "createMultiSig(string,address[],uint16)": FunctionFragment;
    "createMyMultiSigExtended(string,address[],uint16,bool)": FunctionFragment;
    "creationType(uint256)": FunctionFragment;
    "multiSig(uint256)": FunctionFragment;
    "multiSigByCreator(address,uint256)": FunctionFragment;
    "multiSigCount()": FunctionFragment;
    "multiSigCreatorCount(address)": FunctionFragment;
    "name()": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createMultiSig"
      | "createMyMultiSigExtended"
      | "creationType"
      | "multiSig"
      | "multiSigByCreator"
      | "multiSigCount"
      | "multiSigCreatorCount"
      | "name"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createMultiSig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createMyMultiSigExtended",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "creationType",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "multiSig",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "multiSigByCreator",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "multiSigCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiSigCreatorCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "createMultiSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMyMultiSigExtended",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creationType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multiSig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "multiSigByCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiSigCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiSigCreatorCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "MyMultiSigCreated(address,address,uint256,string,address[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MyMultiSigCreated"): EventFragment;
}

export interface MyMultiSigCreatedEventObject {
  creator: string;
  contractAddress: string;
  contractIndex: BigNumber;
  contractName: string;
  originalOwners: string[];
}
export type MyMultiSigCreatedEvent = TypedEvent<
  [string, string, BigNumber, string, string[]],
  MyMultiSigCreatedEventObject
>;

export type MyMultiSigCreatedEventFilter =
  TypedEventFilter<MyMultiSigCreatedEvent>;

export interface MyMultiSigFactoryWithChugSplash extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MyMultiSigFactoryWithChugSplashInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createMultiSig(
      contractName: PromiseOrValue<string>,
      owners: PromiseOrValue<string>[],
      threshold: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createMyMultiSigExtended(
      contractName: PromiseOrValue<string>,
      owners: PromiseOrValue<string>[],
      threshold: PromiseOrValue<BigNumberish>,
      isOnlyOwnerRequest: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    creationType(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    multiSig(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    multiSigByCreator(
      creator: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    multiSigCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    multiSigCreatorCount(
      creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  createMultiSig(
    contractName: PromiseOrValue<string>,
    owners: PromiseOrValue<string>[],
    threshold: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createMyMultiSigExtended(
    contractName: PromiseOrValue<string>,
    owners: PromiseOrValue<string>[],
    threshold: PromiseOrValue<BigNumberish>,
    isOnlyOwnerRequest: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  creationType(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  multiSig(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  multiSigByCreator(
    creator: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  multiSigCount(overrides?: CallOverrides): Promise<BigNumber>;

  multiSigCreatorCount(
    creator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    createMultiSig(
      contractName: PromiseOrValue<string>,
      owners: PromiseOrValue<string>[],
      threshold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    createMyMultiSigExtended(
      contractName: PromiseOrValue<string>,
      owners: PromiseOrValue<string>[],
      threshold: PromiseOrValue<BigNumberish>,
      isOnlyOwnerRequest: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    creationType(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    multiSig(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    multiSigByCreator(
      creator: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    multiSigCount(overrides?: CallOverrides): Promise<BigNumber>;

    multiSigCreatorCount(
      creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "MyMultiSigCreated(address,address,uint256,string,address[])"(
      creator?: PromiseOrValue<string> | null,
      contractAddress?: PromiseOrValue<string> | null,
      contractIndex?: PromiseOrValue<BigNumberish> | null,
      contractName?: null,
      originalOwners?: null
    ): MyMultiSigCreatedEventFilter;
    MyMultiSigCreated(
      creator?: PromiseOrValue<string> | null,
      contractAddress?: PromiseOrValue<string> | null,
      contractIndex?: PromiseOrValue<BigNumberish> | null,
      contractName?: null,
      originalOwners?: null
    ): MyMultiSigCreatedEventFilter;
  };

  estimateGas: {
    createMultiSig(
      contractName: PromiseOrValue<string>,
      owners: PromiseOrValue<string>[],
      threshold: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createMyMultiSigExtended(
      contractName: PromiseOrValue<string>,
      owners: PromiseOrValue<string>[],
      threshold: PromiseOrValue<BigNumberish>,
      isOnlyOwnerRequest: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    creationType(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiSig(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiSigByCreator(
      creator: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiSigCount(overrides?: CallOverrides): Promise<BigNumber>;

    multiSigCreatorCount(
      creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createMultiSig(
      contractName: PromiseOrValue<string>,
      owners: PromiseOrValue<string>[],
      threshold: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createMyMultiSigExtended(
      contractName: PromiseOrValue<string>,
      owners: PromiseOrValue<string>[],
      threshold: PromiseOrValue<BigNumberish>,
      isOnlyOwnerRequest: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    creationType(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multiSig(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multiSigByCreator(
      creator: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multiSigCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multiSigCreatorCount(
      creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
