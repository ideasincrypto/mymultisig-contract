/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface MyMultiSigInterface extends utils.Interface {
  functions: {
    "addOwner(address)": FunctionFragment;
    "changeThreshold(uint16)": FunctionFragment;
    "execTransaction(address,uint256,bytes,uint256,bytes)": FunctionFragment;
    "isOwner(address)": FunctionFragment;
    "isValidSignature(address,uint256,bytes,uint256,bytes)": FunctionFragment;
    "multiRequest(address[],uint256[],bytes[],uint256[])": FunctionFragment;
    "name()": FunctionFragment;
    "nonce()": FunctionFragment;
    "ownerCount()": FunctionFragment;
    "removeOwner(address)": FunctionFragment;
    "replaceOwner(address,address)": FunctionFragment;
    "threshold()": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addOwner"
      | "changeThreshold"
      | "execTransaction"
      | "isOwner"
      | "isValidSignature"
      | "multiRequest"
      | "name"
      | "nonce"
      | "ownerCount"
      | "removeOwner"
      | "replaceOwner"
      | "threshold"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeThreshold",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "execTransaction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multiRequest",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceOwner",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "threshold", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "threshold", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "ContractEndOfLife(uint256)": EventFragment;
    "OwnerAdded(address)": EventFragment;
    "OwnerRemoved(address)": EventFragment;
    "ThresholdChanged(uint256)": EventFragment;
    "TransactionExecuted(address,address,uint256,bytes,uint256,uint256)": EventFragment;
    "TransactionFailed(address,address,uint256,bytes,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractEndOfLife"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ThresholdChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionFailed"): EventFragment;
}

export interface ContractEndOfLifeEventObject {
  txNonceLefts: BigNumber;
}
export type ContractEndOfLifeEvent = TypedEvent<
  [BigNumber],
  ContractEndOfLifeEventObject
>;

export type ContractEndOfLifeEventFilter =
  TypedEventFilter<ContractEndOfLifeEvent>;

export interface OwnerAddedEventObject {
  owner: string;
}
export type OwnerAddedEvent = TypedEvent<[string], OwnerAddedEventObject>;

export type OwnerAddedEventFilter = TypedEventFilter<OwnerAddedEvent>;

export interface OwnerRemovedEventObject {
  owner: string;
}
export type OwnerRemovedEvent = TypedEvent<[string], OwnerRemovedEventObject>;

export type OwnerRemovedEventFilter = TypedEventFilter<OwnerRemovedEvent>;

export interface ThresholdChangedEventObject {
  threshold: BigNumber;
}
export type ThresholdChangedEvent = TypedEvent<
  [BigNumber],
  ThresholdChangedEventObject
>;

export type ThresholdChangedEventFilter =
  TypedEventFilter<ThresholdChangedEvent>;

export interface TransactionExecutedEventObject {
  sender: string;
  to: string;
  value: BigNumber;
  data: string;
  txnGas: BigNumber;
  txnNonce: BigNumber;
}
export type TransactionExecutedEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber, BigNumber],
  TransactionExecutedEventObject
>;

export type TransactionExecutedEventFilter =
  TypedEventFilter<TransactionExecutedEvent>;

export interface TransactionFailedEventObject {
  sender: string;
  to: string;
  value: BigNumber;
  data: string;
  txnGas: BigNumber;
  txnNonce: BigNumber;
}
export type TransactionFailedEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber, BigNumber],
  TransactionFailedEventObject
>;

export type TransactionFailedEventFilter =
  TypedEventFilter<TransactionFailedEvent>;

export interface MyMultiSig extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MyMultiSigInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addOwner(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeThreshold(
      newThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    execTransaction(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      txnGas: PromiseOrValue<BigNumberish>,
      signatures: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isOwner(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidSignature(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      txnGas: PromiseOrValue<BigNumberish>,
      signatures: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { valid: boolean }>;

    multiRequest(
      to: PromiseOrValue<string>[],
      value: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>[],
      txGas: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    ownerCount(overrides?: CallOverrides): Promise<[number]>;

    removeOwner(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    replaceOwner(
      oldOwner: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    threshold(overrides?: CallOverrides): Promise<[number]>;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  addOwner(
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeThreshold(
    newThreshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  execTransaction(
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    txnGas: PromiseOrValue<BigNumberish>,
    signatures: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isOwner(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidSignature(
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    txnGas: PromiseOrValue<BigNumberish>,
    signatures: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  multiRequest(
    to: PromiseOrValue<string>[],
    value: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>[],
    txGas: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  ownerCount(overrides?: CallOverrides): Promise<number>;

  removeOwner(
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  replaceOwner(
    oldOwner: PromiseOrValue<string>,
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  threshold(overrides?: CallOverrides): Promise<number>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addOwner(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeThreshold(
      newThreshold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    execTransaction(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      txnGas: PromiseOrValue<BigNumberish>,
      signatures: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOwner(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidSignature(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      txnGas: PromiseOrValue<BigNumberish>,
      signatures: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    multiRequest(
      to: PromiseOrValue<string>[],
      value: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>[],
      txGas: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    ownerCount(overrides?: CallOverrides): Promise<number>;

    removeOwner(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    replaceOwner(
      oldOwner: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    threshold(overrides?: CallOverrides): Promise<number>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ContractEndOfLife(uint256)"(
      txNonceLefts?: PromiseOrValue<BigNumberish> | null
    ): ContractEndOfLifeEventFilter;
    ContractEndOfLife(
      txNonceLefts?: PromiseOrValue<BigNumberish> | null
    ): ContractEndOfLifeEventFilter;

    "OwnerAdded(address)"(
      owner?: PromiseOrValue<string> | null
    ): OwnerAddedEventFilter;
    OwnerAdded(owner?: PromiseOrValue<string> | null): OwnerAddedEventFilter;

    "OwnerRemoved(address)"(
      owner?: PromiseOrValue<string> | null
    ): OwnerRemovedEventFilter;
    OwnerRemoved(
      owner?: PromiseOrValue<string> | null
    ): OwnerRemovedEventFilter;

    "ThresholdChanged(uint256)"(
      threshold?: PromiseOrValue<BigNumberish> | null
    ): ThresholdChangedEventFilter;
    ThresholdChanged(
      threshold?: PromiseOrValue<BigNumberish> | null
    ): ThresholdChangedEventFilter;

    "TransactionExecuted(address,address,uint256,bytes,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<BigNumberish> | null,
      data?: null,
      txnGas?: null,
      txnNonce?: null
    ): TransactionExecutedEventFilter;
    TransactionExecuted(
      sender?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<BigNumberish> | null,
      data?: null,
      txnGas?: null,
      txnNonce?: null
    ): TransactionExecutedEventFilter;

    "TransactionFailed(address,address,uint256,bytes,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<BigNumberish> | null,
      data?: null,
      txnGas?: null,
      txnNonce?: null
    ): TransactionFailedEventFilter;
    TransactionFailed(
      sender?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<BigNumberish> | null,
      data?: null,
      txnGas?: null,
      txnNonce?: null
    ): TransactionFailedEventFilter;
  };

  estimateGas: {
    addOwner(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeThreshold(
      newThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    execTransaction(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      txnGas: PromiseOrValue<BigNumberish>,
      signatures: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isOwner(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidSignature(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      txnGas: PromiseOrValue<BigNumberish>,
      signatures: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiRequest(
      to: PromiseOrValue<string>[],
      value: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>[],
      txGas: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    ownerCount(overrides?: CallOverrides): Promise<BigNumber>;

    removeOwner(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    replaceOwner(
      oldOwner: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    threshold(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addOwner(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeThreshold(
      newThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    execTransaction(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      txnGas: PromiseOrValue<BigNumberish>,
      signatures: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isOwner(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidSignature(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      txnGas: PromiseOrValue<BigNumberish>,
      signatures: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multiRequest(
      to: PromiseOrValue<string>[],
      value: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>[],
      txGas: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeOwner(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    replaceOwner(
      oldOwner: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    threshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
